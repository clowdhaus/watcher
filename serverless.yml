service: watcher

frameworkVersion: '>=1.65.0'

custom:
  stage_long:
    dev: development
    prod: production
  account_id: ${opt:account_id, '028920223318'}
  lambdaArnPrefix: arn:aws:lambda:${self:provider.region}:${self:custom.account_id}:function:${self:service}-${self:provider.stage}
  snsArnPrefix: arn:aws:sns:${self:provider.region}:${self:custom.account_id}
  dynamodbArnPrefix: arn:aws:dynamodb:${self:provider.region}:${self:custom.account_id}:table
  pythonRequirements:
    usePoetry: false
    dockerizePip: true

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  timeout: 5
  memorySize: 256
  logRetentionInDays: 30
  deploymentBucket:
    name: serverless-${self:custom.account_id}-${self:provider.region}
    serverSideEncryption: AES256
  versionFunctions: false
  environment:
    STAGE: ${opt:stage, 'dev'}
    REGION: ${self:provider.region}
    SNS_ARN_PREFIX: ${self:custom.snsArnPrefix}
    PYTHONWARNINGS: ignore # https://github.com/jmespath/jmespath.py/issues/187
    PULL_REQUEST_TABLE: watcher-pull-requests
    VERSION_TABLE: watcher-versions
  tags:
    service: watcher
    environment: ${self:custom.stage_long.${self:provider.stage}}
    createdby: serverless
    repository: https://github.com/clowdhaus/watcher
  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource:
        - '*'

layers:
  watcherCore:
    package:
      artifact: layers/core/core.zip
    description: Lambda layer containing core python libraries
    compatibleRuntimes:
      - python3.8
    retain: false

resources:
  Resources:
    versionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.VERSION_TABLE}
        BillingMode: PAY_PER_REQUEST
        SSESpecification:
          SSEEnabled: true
        AttributeDefinitions:
          - AttributeName: repository
            AttributeType: S
        KeySchema:
          - AttributeName: repository
            KeyType: HASH
    pullRequestsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PULL_REQUEST_TABLE}
        BillingMode: PAY_PER_REQUEST
        SSESpecification:
          SSEEnabled: true
        AttributeDefinitions:
          - AttributeName: repository
            AttributeType: S
          - AttributeName: pull_request
            AttributeType: N
        KeySchema:
          - AttributeName: repository
            KeyType: HASH
          - AttributeName: pull_request
            KeyType: RANGE

package:
  exclude:
    - '**/*'
  include:
    - lambdas/*.py

plugins:
  - serverless-iam-roles-per-function
  - serverless-python-requirements

functions:
  hubReceive:
    handler: lambdas/hub.receive
    layers:
      - { Ref: WatcherCoreLambdaLayer }
    description: Receive and validate GitHub webhooks before passing along payload
    iamRoleStatementsInherit: true
    iamRoleStatementsName: ${self:service}-${self:provider.stage}-hub-receive
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ssm:GetParameter
        Resource:
          - arn:aws:ssm:us-east-1:${self:custom.account_id}:parameter/watcher/github_webhook_secret
      - Effect: Allow
        Action:
          - sns:Publish
        Resource:
          - '${self:custom.snsArnPrefix}:Watcher-*'
    events:
      - http:
          path: watcher
          method: post

  versionsSync:
    handler: lambdas/versions.sync
    layers:
      - { Ref: WatcherCoreLambdaLayer }
    timeout: 600
    memorySize: 512
    description: Sync all repository versions
    environment:
      EMIT_MESSAGE_TOPIC: ${self:custom.snsArnPrefix}:Watcher-VersionsUpdateReadme
    iamRoleStatementsInherit: true
    iamRoleStatementsName: ${self:service}-${self:provider.stage}-versions-sync
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ssm:GetParameter
        Resource:
          - arn:aws:ssm:us-east-1:${self:custom.account_id}:parameter/watcher/github_user_token
      - Effect: 'Allow'
        Action:
          - dynamodb:PutItem
          - dynamodb:DeleteItem
          - dynamodb:UpdateItem
        Resource:
          - '${self:custom.dynamodbArnPrefix}/${self:provider.environment.VERSION_TABLE}'
      - Effect: Allow
        Action:
          - sns:Publish
        Resource:
          - '${self:custom.snsArnPrefix}:Watcher-*'
    events:
      - schedule:
          name: your-scheduled-rate-event-name
          description: 'your scheduled rate event description'
          rate: cron(0 10 ? * MON-FRI *)

  versionsNewTag:
    handler: lambdas/versions.new_tag
    layers:
      - { Ref: WatcherCoreLambdaLayer }
    timeout: 60
    memorySize: 512
    description: Responds to new tag events
    environment:
      EMIT_MESSAGE_TOPIC: ${self:custom.snsArnPrefix}:Watcher-VersionsUpdateReadme
    iamRoleStatementsInherit: true
    iamRoleStatementsName: ${self:service}-${self:provider.stage}-versions-new-tag
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ssm:GetParameter
        Resource:
          - arn:aws:ssm:us-east-1:${self:custom.account_id}:parameter/watcher/github_user_token
      - Effect: 'Allow'
        Action:
          - dynamodb:PutItem
          - dynamodb:DeleteItem
          - dynamodb:UpdateItem
        Resource:
          - '${self:custom.dynamodbArnPrefix}/${self:provider.environment.VERSION_TABLE}'
      - Effect: Allow
        Action:
          - sns:Publish
        Resource:
          - '${self:custom.snsArnPrefix}:Watcher-*'
    events:
      - sns:
          topicName: Watcher-Tag
          displayName: Contains tag event payloads

  versionsCreateRelease:
    handler: lambdas/versions.create_release
    layers:
      - { Ref: WatcherCoreLambdaLayer }
    description: Responds to new tag events to create a release
    iamRoleStatementsInherit: true
    iamRoleStatementsName: ${self:service}-${self:provider.stage}-versions-create-release
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ssm:GetParameter
        Resource:
          - arn:aws:ssm:us-east-1:${self:custom.account_id}:parameter/watcher/github_user_token
    events:
      - sns:
          topicName: Watcher-Tag
          displayName: Contains tag event payloads

  versionsUpdateReadme:
    handler: lambdas/versions.update_readme
    layers:
      - { Ref: WatcherCoreLambdaLayer }
    timeout: 60
    memorySize: 512
    description: Updates version section of metadata repo README file
    iamRoleStatementsInherit: true
    iamRoleStatementsName: ${self:service}-${self:provider.stage}-versions-update-readme
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ssm:GetParameter
        Resource:
          - arn:aws:ssm:us-east-1:${self:custom.account_id}:parameter/watcher/github_user_token
      - Effect: 'Allow'
        Action:
          - dynamodb:Scan
        Resource:
          - '${self:custom.dynamodbArnPrefix}/${self:provider.environment.VERSION_TABLE}'
    events:
      - sns:
          topicName: Watcher-VersionsUpdateReadme
          displayName: Trigger to update versions section of metadata repo README file


  pullRequestsPullRequest:
    handler: lambdas/pull_requests.pull_request
    layers:
      - { Ref: WatcherCoreLambdaLayer }
    timeout: 60
    memorySize: 512
    description: Responds to pull request events
    environment:
      EMIT_MESSAGE_TOPIC: ${self:custom.snsArnPrefix}:Watcher-PullRequestsUpdateReadme
    iamRoleStatementsInherit: true
    iamRoleStatementsName: ${self:service}-${self:provider.stage}-hub-pull-request
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ssm:GetParameter
        Resource:
          - arn:aws:ssm:us-east-1:${self:custom.account_id}:parameter/watcher/github_user_token
      - Effect: 'Allow'
        Action:
          - dynamodb:PutItem
          - dynamodb:DeleteItem
          - dynamodb:UpdateItem
        Resource:
          - '${self:custom.dynamodbArnPrefix}/${self:provider.environment.PULL_REQUEST_TABLE}'
      - Effect: Allow
        Action:
          - sns:Publish
        Resource:
          - '${self:custom.snsArnPrefix}:Watcher-*'
    events:
      - sns:
          topicName: Watcher-PullRequest
          displayName: Contains pull request event payloads

  pullRequestsUpdateReadme:
    handler: lambdas/pull_requests.update_readme
    layers:
      - { Ref: WatcherCoreLambdaLayer }
    timeout: 60
    memorySize: 512
    description: Updates pull request section of metadata repo README file
    iamRoleStatementsInherit: true
    iamRoleStatementsName: ${self:service}-${self:provider.stage}-pull-requests-update-readme
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ssm:GetParameter
        Resource:
          - arn:aws:ssm:us-east-1:${self:custom.account_id}:parameter/watcher/github_user_token
      - Effect: 'Allow'
        Action:
          - dynamodb:Scan
        Resource:
          - '${self:custom.dynamodbArnPrefix}/${self:provider.environment.PULL_REQUEST_TABLE}'
    events:
      - sns:
          topicName: Watcher-PullRequestsUpdateReadme
          displayName: Trigger to update pull request section of metadata repo README file
